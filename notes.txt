Как се инсталира Vite:
в терминала се пише npm create vite .
npm i
npm run dev

Какво е компонент: 
Компонента е функция, която връща реакт елемент

Когато искаме да подадем стил на елемент в реакт го подаваме с къдрави скоби като обект - {} - style={{color: 'red'}}


Props:
можем да подаваме данни от parrent функция към child функция използвайки Props.


parrent функцията подава данните по следния начин:
например <MovieListItem title={props.movies(име на филма)} />


child функцията получава данните по следния начин:
например {props.title}

Как се задава useState:
useState служи за да запазим моментното състояние на компонента, декларира се по следния начин:

const [email, setEmail] = useState("")

Винаги се подава като деструкториран масив, като първата стойност пази моментния state, а втората е функция, която го променя
Сетъра винаги запазва стойността в себе си и извиква функцията наново
Как изглежда в целият си вариант:

const [count, setCount] = useState("")

const handler = () => {
    setCount(count + 1)  -- взимаме предходната стойност и я увеличаваме с 1, след което тя се качва и извиква функцията наново
}


EVENT HANDLING IN REACT:
Винаги използваме camel case
отново се подават event handler-и
не се използва addEventListener а се използва следния синтаксис:
<button onClick={clickHandler} - в къдравите скоби подаваме фунцкия, която да сме написали като handler
можем да го направим и на 1 ред, чрез анонимна фунцкия:
<button onClick={() => setCount(count + 1)}


Кога се пререндерира компонент:
1. Initial Render - първия път когато го заредим
2. Parent Rerender - когато нещо се промени в parent-a всичко надолу се пререндерира
3. Props - когато променим пропс на компонента, той се пререндерира
4. State hook changed - когато променим state-a компонента се пререндерира

useEffect - чрез него задаваме нещо, което искаме да се изпълни в определен момент
ПРИМЕР:

useEffect(() => {
    if (!isManual) {
        setTimeout(() => {
            setTime(prevTime => prevTime + 1)
            setIsManual(false)
        } [time, isManual])
    }
})

Когато използваме useEffect винаги подаваме dependancy масив накрая. В него казваме ако едно от тези неща се е променило или и двете, той ще се вземе предвид. 
Можем да добавяме една или повече стойности, като те са условието useEffect да се вземе предвид.

CSS на реакт елемент се добавя по следния начин: име.module.css

Във файла на самия модул казваме:
import styles from...(името на файла.modules.css)

Във всеки елемент трябва да аплайнем className и да достъпим класа като пропърти на обект:
<h1 className={styles['fancy-timer]}</h1>

FETCH ЗЯВКИ В REACT:
1. Декларираме URL-a от който ще взимаме данните като променлива const URL = https/localhost:3030
2. Трябва да запазим данните някъде затова правим useState - const [users, setUsers] = useState([])
3. Правим useEffect, в който правим функция, която направи заявката и ще се изпълни само веднъж при маунтване на компонента
useEffect(() => {
async function getUsers() {
const response = await fetch(`${URL}/users`)
const result = await response.json()
const data = Object.values(result)

setUsers(data)
}
getUsers()
}, [])
4. Слагаме в един try/catch всичко, за да върнем грешка при неуспешно получаване на данните




Как се прави POST заявка и се публикуват данни на сървъра:

const addUserSaveHandler = async (e) => {
PREVENT REFRESH:
e.preventDefault

GET USER DATA:
const formData = new formData(e.currentTarget)
const userData = Object.fromEntries(formData)

MAKE POST REQUEST:
const response = await fetch(`${baseUrl}/users`, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    }
    body: JSON.stringify(userData)
})
const createdUser = await response.json()

UPDATE LOCAL STATE:
setUsers(oldUsers => [...oldUsers, createdUser])

CLOSE MODAL:
setShowAddUser(false)
}